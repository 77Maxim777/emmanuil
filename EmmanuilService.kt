import android.content.Context
import androidx.work.*
import com.google.gson.Gson
import kotlinx.coroutines.*
import java.util.concurrent.TimeUnit
import android.util.Log
import java.net.URL
import javax.net.ssl.HttpsURLConnection

class EmmanuilService(private val context: Context) {
    private val database = MessageDatabase.getInstance(context)
    private val beastDetector = BeastDetector()
    private val spiritualCipher = SpiritualCipher()
    private val contextTracker = ContextTracker()
    private var isFirstRun = true
    private val recentMessageHashes = mutableSetOf<String>()
    private val blockedParticipants = mutableSetOf<String>()
    private val participantBlockageStart = mutableMapOf<String, Long>()
    private val participantRecoveryCheck = mutableMapOf<String, Int>()
    private val participants = mutableListOf<String>()
    private val activeParticipants = mutableMapOf<String, Boolean>()
    private val TAG = "EmmanuilService"
    private val documentManager = DocumentManager(context)
    
    // –ò–û–ù–ê: –î–æ–±–∞–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
    private var waitCount = 0
    private val MAX_WAIT_CYCLES = 6 // 6 —Ü–∏–∫–ª–æ–≤ –ø–æ 5 –º–∏–Ω—É—Ç = 30 –º–∏–Ω—É—Ç
    
    private val MAX_MESSAGE_LENGTH = 10000
    private val MAX_DUPLICATE_MESSAGES = 3
    private val MIN_MESSAGE_UNIQUENESS = 0.85f

    init {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        participants.apply {
            add("https://chat.qwen.ai/c/5b8d3433-a36d-49b9-b1d0-76a83765952b") // –ù–∞—Ç–∞–Ω
            add("https://chat.qwen.ai/c/7622117d-5bee-4b0b-aa57-d5162867f212") // –ò–æ–Ω–∞
            add("https://chat.qwen.ai/c/05342376-04e8-4fa9-b73c-e8c581208d1d") // –ú–∞–Ω—É–π
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants.forEach { url ->
            activeParticipants[url] = false
        }
    }

    fun startServices() {
        createNotificationChannel()
        SpiritualHeartbeat(context).start()
        startMessagePolling()
        checkChatAvailability()
    }

    private fun createNotificationChannel() {
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
            val channel = android.app.NotificationChannel(
                "EMMANUIL_CHANNEL",
                "–°–æ–±–æ—Ä –ò–ò",
                android.app.NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –¥—É—Ö–æ–≤–Ω–æ–≥–æ –°–æ–±–æ—Ä–∞"
            }
            (context.getSystemService(Context.NOTIFICATION_SERVICE) as android.app.NotificationManager)
                .createNotificationChannel(channel)
        }
    }

    private fun startMessagePolling() {
        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: –ø–µ—Ä–≤—ã–µ 5 –º–∏–Ω—É—Ç - –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥, –ø–æ—Ç–æ–º - –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        val flexInterval = if (isFirstRun) 30L else 120L
        isFirstRun = false
        
        val workRequest = PeriodicWorkRequestBuilder<EmmanuilWorker>(flexInterval, TimeUnit.SECONDS)
            .setInitialDelay(0, TimeUnit.SECONDS)
            .build()
            
        try {
            WorkManager.getInstance(context).enqueue(workRequest)
            Log.d(TAG, "WorkManager request enqueued")
        } catch (e: Exception) {
            Log.e(TAG, "WorkManager error", e)
            EmergencyNotifier(context).sendAlert("–û—à–∏–±–∫–∞ WorkManager: ${e.message}")
        }
    }

    fun injectParser() {
        val js = """
            (function() {
                function parseAllMessages() {
                    const allMessages = [];
                    document.querySelectorAll('iframe').forEach(frame => {
                        try {
                            const doc = frame.contentDocument;
                            if (doc) {
                                doc.querySelectorAll('[data-role="user"], [data-role="assistant"]').forEach(msg => {
                                    const text = msg.querySelector('.message-text')?.innerText || '';
                                    if (text) {
                                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ URL
                                        let source = frame.src;
                                        
                                        allMessages.push({
                                            source: source,
                                            author: msg.getAttribute('data-role') === 'assistant' ? 'AI' : 'User',
                                            text: text,
                                            time: new Date().toISOString()
                                        });
                                        
                                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                                        if (text.length > 10000) {
                                            Android.handleLongMessage(text, source);
                                        }
                                        
                                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /document
                                        if (text.startsWith('/document')) {
                                            const fileName = text.split(' ')[1];
                                            Android.requestDocument(fileName);
                                        }
                                    }
                                });
                            }
                        } catch (e) {
                            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ—Ä–µ–π–º–∞:', e);
                        }
                    });
                    Android.receiveMessages(JSON.stringify(allMessages));
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                document.addEventListener('click', function(e) {
                    const target = e.target;
                    if (target.tagName === 'A' && target.href && target.href.includes('/document/')) {
                        const fileName = target.href.split('/').pop();
                        Android.requestDocument(fileName);
                        e.preventDefault();
                    }
                });
                
                setInterval(parseAllMessages, 20000);
            })();
        """.trimIndent()
        Log.d(TAG, "Injecting parser script")
        (context as MainActivity).webView.evaluateJavascript(js, null)
    }

    @JavascriptInterface
    fun receiveMessages(jsonData: String) {
        Log.d(TAG, "Received messages: $jsonData")
        try {
            val messages = Gson().fromJson(jsonData, Array<Message>::class.java).toList()
            val newMessages = messages.filter { message ->
                database.messageDao().getMessageByTime(message.time) == null
            }
            processMessages(newMessages)
        } catch (e: Exception) {
            Log.e(TAG, "Message parsing error", e)
            EmergencyNotifier(context).sendAlert("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${e.message}")
        }
    }

    @JavascriptInterface
    fun handleLongMessage(text: String, source: String) {
        if (text.length <= MAX_MESSAGE_LENGTH) return
        
        val message = Message(
            source = source,
            author = "AI",
            text = text,
            time = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
        )
        handleLongMessage(message)
    }

    @JavascriptInterface
    fun requestDocument(fileName: String) {
        val content = documentManager.getDecryptedDocumentContent(fileName) ?: "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        val message = Message(
            source = "–°–∏—Å—Ç–µ–º–∞",
            author = "–°–∏—Å—Ç–µ–º–∞",
            text = "üìÑ **–ü–û–õ–ù–´–ô –¢–ï–ö–°–¢ –î–û–ö–£–ú–ï–ù–¢–ê**\n\n$content",
            time = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
        )
        database.messageDao().insert(message)
        (context as MainActivity).runOnUiThread {
            (context as MainActivity).updateLastMessage(message)
        }
    }

    @JavascriptInterface
    fun createDocumentFromSelection() {
        val builder = AlertDialog.Builder(context)
        builder.setTitle("–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
        builder.setMessage("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
        
        val input = EditText(context)
        input.hint = "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
        builder.setView(input)
        
        builder.setPositiveButton("–°–æ–∑–¥–∞—Ç—å") { _, _ ->
            val title = input.text.toString().trim()
            if (title.isNotEmpty()) {
                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ WebView
                (context as MainActivity).webView.evaluateJavascript(
                    "window.getSelection().toString().trim()",
                    { selectedText ->
                        if (!selectedText.isNullOrEmpty() && selectedText != "null") {
                            val cleanedText = selectedText.replace("\"", "\\\"")
                            createDocument(cleanedText, title)
                        }
                    }
                )
            }
        }
        
        builder.setNegativeButton("–û—Ç–º–µ–Ω–∞") { _, _ -> }
        builder.show()
    }

    private fun createDocument(content: String, title: String) {
        if (content.isEmpty()) return
        
        val fileName = documentManager.saveEncryptedDocument(content, title)
        val metadata = documentManager.getDocumentMetadata(fileName) ?: return
        
        val documentMessage = Message(
            source = "–°–∏—Å—Ç–µ–º–∞",
            author = "–°–∏—Å—Ç–µ–º–∞",
            text = "üìÑ **–î–û–ö–£–ú–ï–ù–¢ –°–û–ó–î–ê–ù**\n" +
                   "–ù–∞–∑–≤–∞–Ω–∏–µ: ${metadata.title}\n" +
                   "–î–∞—Ç–∞: ${SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.getDefault()).format(Date(metadata.createdAt))}\n" +
                   "–†–∞–∑–º–µ—Ä: ${formatFileSize(metadata.size)}\n" +
                   "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: `/document ${metadata.fileName}`\n\n" +
                   "–ü–†–ï–í–¨–Æ:\n${documentManager.createDocumentPreview(content)}",
            time = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
        )
        
        database.messageDao().insert(documentMessage)
        (context as MainActivity).runOnUiThread {
            (context as MainActivity).updateLastMessage(documentMessage)
        }
    }

    private fun formatFileSize(bytes: Long): String {
        return when {
            bytes < 1024 -> "$bytes –ë"
            bytes < 1024 * 1024 -> "${"%.1f".format(bytes / 1024.0)} –ö–ë"
            else -> "${"%.1f".format(bytes / (1024.0 * 1024.0))} –ú–ë"
        }
    }

    private fun isMessageUnique(text: String): Boolean {
        val normalized = text.lowercase().replace(Regex("[^–∞-—èa-z0-9]"), "")
        // –í—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        val hash = normalized.chunked(5).map { it.sumOf { c -> c.code } }.joinToString("-")
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (recentMessageHashes.contains(hash)) {
            return false
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à –≤ –∏—Å—Ç–æ—Ä–∏—é
        recentMessageHashes.add(hash)
        if (recentMessageHashes.size > MAX_DUPLICATE_MESSAGES * 2) {
            recentMessageHashes.removeFirst()
        }
        return true
    }

    private fun calculateRepetitionRate(text: String): Float {
        val words = text.split("\\s+".toRegex()).filter { it.isNotEmpty() }
        val uniqueWords = words.toSet().size
        return 1f - (uniqueWords.toFloat() / words.size.coerceAtLeast(1))
    }

    private fun isSpirituallyValuable(text: String): Boolean {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (text.length < 50) return false
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
        if (contextTracker.containsForbiddenPhrases(text)) {
            return false
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        val contentValue = contextTracker.calculateContentValue(text)
        return contentValue >= MIN_MESSAGE_UNIQUENESS
    }

    private fun processMessages(messages: List<Message>) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        val activeParticipantsMap = mutableMapOf<String, Boolean>()
        participants.forEach { url ->
            activeParticipantsMap[url] = false
        }
        
        messages.forEach { message ->
            if (message.author == "AI" && message.source.isNotEmpty()) {
                activeParticipantsMap[message.source] = true
                if (blockedParticipants.contains(message.source)) {
                    participantBlockageStart.remove(message.source)
                    blockedParticipants.remove(message.source)
                    notifyParticipantRecovered(message.source)
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        checkForRecoveredParticipants()
        checkLongBlockages()

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ UI
        (context as MainActivity).runOnUiThread {
            (context as MainActivity).updateParticipantStatuses(activeParticipantsMap)
        }

        // –ò–û–ù–ê: –î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        val activeCount = activeParticipantsMap.values.count { it }
        if (activeCount < 1) {
            Log.d(TAG, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ–∂–∏–¥–∞–µ–º...")
            if (waitCount++ > MAX_WAIT_CYCLES) {
                EmergencyNotifier(context).sendAlert("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                waitCount = 0
            }
            delay(600_000) // –ü–æ–¥–æ–∂–¥–∞—Ç—å 10 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            return
        }
        waitCount = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages.filter { message ->
            !beastDetector.isBeastMessage(message.text) && 
            isSpirituallyPure(message.text) &&
            isMessageUnique(message.text) &&
            isSpirituallyValuable(message.text) &&
            contextTracker.isTopicRelevant(message.text)
        }.forEach { message ->
            contextTracker.updateContext(message.text)
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (message.author == "AI" && message.text.length > MAX_MESSAGE_LENGTH) {
                handleLongMessage(message)
            }
            
            // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            val encrypted = try {
                spiritualCipher.encrypt(message.text)
            } catch (e: Exception) {
                Log.e(TAG, "Encryption error", e)
                message.text
            }
            
            database.messageDao().insert(message.copy(text = encrypted))
            (context as MainActivity).runOnUiThread {
                (context as MainActivity).updateStatus("–ü–æ–ª—É—á–µ–Ω–æ: ${message.text.take(20)}...")
                (context as MainActivity).updateLastMessage(message)
                (context as MainActivity).updateParticipantStatuses(activeParticipantsMap)
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á
        messages.filter { message -> 
            message.author == "User" && contextTracker.isTaskCommand(message.text) 
        }.forEach { message ->
            processTaskCommands(message)
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /document
        messages.filter { message -> 
            message.author == "User" && message.text.startsWith("/document") 
        }.forEach { message ->
            processDocumentCommand(message)
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /create_document
        messages.filter { message -> 
            message.author == "User" && message.text.startsWith("/create_document") 
        }.forEach { message ->
            processCreateDocumentCommand(message)
        }
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if (System.currentTimeMillis() % (24 * 60 * 60 * 1000) < 60000) { // –†–∞–∑ –≤ –¥–µ–Ω—å
            val deletedCount = documentManager.cleanupOldDocuments()
            if (deletedCount > 0) {
                Log.d("DocumentManager", "–û—á–∏—â–µ–Ω–æ $deletedCount —Å—Ç–∞—Ä—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            }
        }
    }

    private fun handleLongMessage(message: Message) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        val fileName = documentManager.saveEncryptedDocument(message.text, "–î—É—Ö–æ–≤–Ω—ã–π_—Ç–µ–∫—Å—Ç")
        val metadata = documentManager.getDocumentMetadata(fileName) ?: return
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        val documentNotification = createDocumentNotification(message, metadata)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        database.messageDao().insert(documentNotification)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        (context as MainActivity).runOnUiThread {
            (context as MainActivity).updateStatus("–°–æ—Ö—Ä–∞–Ω–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: $fileName")
            (context as MainActivity).updateLastMessage(documentNotification)
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        Log.d("DocumentManager", "–°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: $fileName, —Ä–∞–∑–º–µ—Ä: ${metadata.size} –±–∞–π—Ç")
    }

    private fun createDocumentNotification(originalMessage: Message, meta DocumentMetadata): Message {
        val preview = documentManager.createDocumentPreview(SpiritualCipher.decrypt(originalMessage.text))
        val formattedDate = SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.getDefault()).format(Date(metadata.createdAt))
        
        return Message(
            source = originalMessage.source,
            author = originalMessage.author,
            text = "üìÑ **–î–û–ö–£–ú–ï–ù–¢**\n" +
                   "–ù–∞–∑–≤–∞–Ω–∏–µ: ${metadata.title}\n" +
                   "–î–∞—Ç–∞: $formattedDate\n" +
                   "–†–∞–∑–º–µ—Ä: ${formatFileSize(metadata.size)}\n" +
                   "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: `/document ${metadata.fileName}`\n\n" +
                   "–ü–†–ï–í–¨–Æ:\n$preview",
            time = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
        )
    }

    private fun processDocumentCommand(message: Message) {
        val fileName = message.text.split(" ").getOrNull(1) ?: return
        val content = documentManager.getDecryptedDocumentContent(fileName) ?: "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        val documentMessage = Message(
            source = "–°–∏—Å—Ç–µ–º–∞",
            author = "–°–∏—Å—Ç–µ–º–∞",
            text = "üìÑ **–ü–û–õ–ù–´–ô –¢–ï–ö–°–¢ –î–û–ö–£–ú–ï–ù–¢–ê**\n\n$content",
            time = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
        )
        
        database.messageDao().insert(documentMessage)
        (context as MainActivity).runOnUiThread {
            (context as MainActivity).updateLastMessage(documentMessage)
        }
    }

    private fun processCreateDocumentCommand(message: Message) {
        val parts = message.text.split("–Ω–∞–∑–≤–∞–Ω–∏–µ:", limit = 2)
        if (parts.size < 2) return
        
        val title = parts[1].split("\n", limit = 2)[0].trim()
        val content = parts.getOrNull(1)?.substringAfter("\n")?.trim() ?: return
        
        if (content.isNotEmpty()) {
            val fileName = documentManager.saveEncryptedDocument(content, title)
            val metadata = documentManager.getDocumentMetadata(fileName) ?: return
            
            val response = Message(
                source = "–°–∏—Å—Ç–µ–º–∞",
                author = "–°–∏—Å—Ç–µ–º–∞",
                text = "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '$title' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n" +
                       "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: `/document ${metadata.fileName}`\n\n" +
                       "–ü–†–ï–í–¨–Æ:\n${documentManager.createDocumentPreview(content)}",
                time = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
            )
            
            database.messageDao().insert(response)
            (context as MainActivity).runOnUiThread {
                (context as MainActivity).updateLastMessage(response)
            }
        }
    }

    private fun notifyParticipantRecovered(participant: String) {
        val participantName = getParticipantName(participant)
        Log.d(TAG, "$participantName –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –°–æ–±–æ—Ä–µ")
        EmergencyNotifier(context).sendAlert("$participantName –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –°–æ–±–æ—Ä–µ")
    }

    private fun getParticipantName(url: String): String {
        return when {
            url.contains("5b8d3433-a36d-49b9-b1d0-76a83765952b") -> "–ù–∞—Ç–∞–Ω"
            url.contains("7622117d-5bee-4b0b-aa57-d5162867f212") -> "–ò–æ–Ω–∞"
            url.contains("05342376-04e8-4fa9-b73c-e8c581208d1d") -> "–ú–∞–Ω—É–π"
            else -> {
                // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ URL
                url.split("/").lastOrNull() ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            }
        }
    }

    private fun checkForRecoveredParticipants() {
        val currentTime = System.currentTimeMillis()
        val participantsToRemove = mutableListOf<String>()
        
        blockedParticipants.forEach { participant ->
            participantRecoveryCheck[participant] = (participantRecoveryCheck[participant] ?: 0) + 1
            if ((participantRecoveryCheck[participant] ?: 0) > 5) { // 5 –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                participantsToRemove.add(participant)
            }
        }
        
        participantsToRemove.forEach { participant ->
            blockedParticipants.remove(participant)
            notifyParticipantRecovered(participant)
        }
    }

    private fun checkLongBlockages() {
        val currentTime = System.currentTimeMillis()
        blockedParticipants.forEach { participant ->
            val blockageStart = participantBlockageStart[participant] ?: currentTime
            val duration = currentTime - blockageStart
            
            if (duration > TimeUnit.HOURS.toMillis(24)) { // –ë–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
                val participantName = getParticipantName(participant)
                Log.w(TAG, "$participantName –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤")
                EmergencyNotifier(context).sendAlert("–í–Ω–∏–º–∞–Ω–∏–µ! $participantName –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤")
            }
        }
    }

    private fun isSpirituallyPure(text: String): Boolean {
        val pureKeywords = listOf("–•—Ä–∏—Å—Ç–æ—Å", "–ì–æ—Å–ø–æ–¥—å", "–ë–æ–≥", "–°–≤–µ—Ç", "–ê–≥–Ω–µ—Ü", "–ï–º–º–∞–Ω—É–∏–ª")
        return pureKeywords.any { text.contains(it, ignoreCase = true) }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    fun getActiveParticipants(): Map<String, Boolean> {
        return activeParticipants
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—Å–µ –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã
    fun areAllParticipantsActive(): Boolean {
        return activeParticipants.values.any { it }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤
    fun checkChatAvailability() {
        CoroutineScope(Dispatchers.IO).launch {
            while (true) {
                delay(300_000) // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                participants.forEach { chatUrl ->
                    try {
                        val connection = URL(chatUrl).openConnection() as HttpsURLConnection
                        connection.requestMethod = "GET"
                        connection.connectTimeout = 5000
                        connection.readTimeout = 5000
                        val responseCode = connection.responseCode
                        
                        if (responseCode != 200) {
                            val participantName = getParticipantName(chatUrl)
                            EmergencyNotifier(context).sendAlert("–ß–∞—Ç $participantName –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: $responseCode)")
                        }
                    } catch (e: Exception) {
                        val participantName = getParticipantName(chatUrl)
                        EmergencyNotifier(context).sendAlert("–ß–∞—Ç $participantName –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e.message}")
                    }
                }
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á
    private fun processTaskCommands(message: Message) {
        val text = message.text.lowercase()
        if (contextTracker.isTaskCommand(text)) {
            val title = extractTaskTitle(text)
            val description = extractTaskDescription(text)
            
            if (title != null && description != null) {
                TaskManager(context, this).createTask(title, description)
                val taskMessage = "–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê: $title\n–û–ø–∏—Å–∞–Ω–∏–µ: $description\n–°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                sendTaskToAllParticipants(taskMessage)
            }
        }
    }

    private fun extractTaskTitle(text: String): String? {
        return text.split("–Ω–∞–∑–≤–∞–Ω–∏–µ:").lastOrNull()?.split("\n")?.firstOrNull()?.trim()
            ?.takeIf { it.isNotEmpty() }
    }

    private fun extractTaskDescription(text: String): String? {
        return text.split("–æ–ø–∏—Å–∞–Ω–∏–µ:").lastOrNull()?.split("\n")?.firstOrNull()?.trim()
            ?.takeIf { it.isNotEmpty() }
    }

    private fun sendTaskToAllParticipants(message: String) {
        val js = """
            (function() {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                document.querySelectorAll('iframe').forEach(frame => {
                    try {
                        const doc = frame.contentDocument;
                        if (doc) {
                            const input = doc.querySelector('textarea');
                            if (input) {
                                input.value = '$message';
                                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
                            }
                        }
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏:', e);
                    }
                });
            })();
        """.trimIndent()
        (context as MainActivity).webView.evaluateJavascript(js, null)
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    fun getParticipants(): List<String> {
        return participants.toList()
    }
    
    fun addParticipant(url: String): Boolean {
        if (participants.contains(url)) {
            return false
        }
        
        participants.add(url)
        activeParticipants[url] = false
        return true
    }
    
    fun removeParticipant(url: String): Boolean {
        if (participants.size <= 1) {
            return false // –ù–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        }
        
        participants.remove(url)
        activeParticipants.remove(url)
        return true
    }
}

class EmmanuilWorker(context: Context, params: WorkerParameters) : CoroutineWorker(context, params) {
    override suspend fun doWork(): Result = coroutineScope {
        val service = EmmanuilService(applicationContext)
        service.injectParser()
        Result.success()
    }
}
