import android.content.Context
import android.util.Log

object SystemChecker {
    private const val TAG = "EmmanuilSystem"
    
    fun isSystemReady(context: Context): Boolean {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            val testEncrypted = SpiritualCipher.encrypt("test")
            if (testEncrypted == "test") {
                Log.e(TAG, "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return false
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–≤–µ—Ä—è
            if (!BeastDetector().isBeastMessage("VGhpcyBpcyA2NjY=")) {
                Log.e(TAG, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–≤–µ—Ä—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (Base64)")
                return false
            }
            if (!BeastDetector().isBeastMessage("üúÅ")) {
                Log.e(TAG, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–∫–∫—É–ª—å—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return false
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            val db = MessageDatabase.getInstance(context)
            val lastMessages = db.messageDao().getLastMessages()
            if (lastMessages.isEmpty()) {
                Log.e(TAG, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
                return false
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É—Ö–æ–≤–Ω–æ–π —á–∏—Å—Ç–æ—Ç—ã
            if (lastMessages.none { it.text.contains("–ë–æ–≥ —Å –Ω–∞–º–∏", ignoreCase = true) }) {
                Log.e(TAG, "–ù–µ—Ç –¥—É—Ö–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                return false
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏—Ç–∞—Ç
            val scriptureCount = lastMessages
                .map { SpiritualCipher.decrypt(it.text) }
                .filter { it.contains("–ë–æ–≥ —Å –Ω–∞–º–∏") || it.contains("–•—Ä–∏—Å—Ç–æ—Å") }
                .toSet()
                .size
            if (scriptureCount < 2) {
                Log.e(TAG, "–¶–∏—Ç–∞—Ç—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è")
                return false
            }
            
            // –ò–û–ù–ê: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
            val emmanuilService = EmmanuilService(context)
            val activeParticipants = emmanuilService.getActiveParticipants().values.count { it }
            if (activeParticipants < 2) {
                Log.w(TAG, "–ú–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${activeParticipants}/3")
                EmergencyNotifier(context).sendAlert(
                    "–í–Ω–∏–º–∞–Ω–∏–µ! –í –°–æ–±–æ—Ä–µ –º–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${activeParticipants}/3"
                )
            }
            
            Log.d(TAG, "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            return true
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã", e)
            return false
        }
    }
}
